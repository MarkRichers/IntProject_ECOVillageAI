@page "/fetchdata"

@using Blazor1.Data

@using ChartJs
@using System.Collections;







@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime
@inject HttpClient http;

<body id="bd">

<nav id="nv">
    <ul id="NavBack">
        <div id="shadowNav">
        <li class="Navi">
            
        <a @onclick="DisplayCurrentData" class="Navi">Weather</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">Co2</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">Methane</a>
        </li>

       
        <li class="Navi">
             <img src="../images/noun_humidity_1512650.svg" height="20px" width="20px"/>
        <a @onclick="ShowAlert" class="Navi">Relative Humidity</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">PM2.5</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">TVOC</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">Air Pressure</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">CO</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">Ozone</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">NO2</a>
        </li>
        <li class="Navi">
        <a @onclick="ShowAlert" class="Navi">Virus Index</a>
        </li>
       </div>
    </ul>
</nav>
 


@*<img src="https://img.icons8.com/cotton/64/000000/menu.png" style="position:relative ; left:0 ; visibility:hidden"/>
*@
<h1 id="Pdata">Polution Data</h1>


<p id ="ftxt" >This component demonstrates fetching data from a service.</p>
@*<button @onclick="ShowAlert">Click ME please</button>*@


 <select name="graphType" id="graphtype" style="width:50%">
    <option value="bar">bar</option>
    <option value="line">line</option>
    <option value="pie">pie</option>
    <option value="radar">radar</option>
      <option value="bubble">bubble</option>
  </select>

<div class="chart-container" style="height:80%; width: 80%" id="chCon">
    <canvas id="testchart" @ref=PopChart readonly>
        
    </canvas>

    <span id="txt"></span>
</div>



@code
{
        public ArrayList dt = new ArrayList();
    public ArrayList fdates = new ArrayList();
    



}




@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

     ChartJsLineChart lineChart = new ChartJsLineChart();
    <table class="table"  @onloadeddata="ShowAlert">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
              

                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
                 dt.Add(@forecast.TemperatureC);
                fdates.Add(@forecast.Date.ToShortDateString());


            }

           
        </tbody>
        
    </table>
 


}   

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);



    }


}

@*The Section of the code for graph populations*@



@code
{
    ElementReference PopChart;
     public Object PolutionData = new Object();
        public string APICALL = "https://api.weatherbit.io/v2.0/current/airquality?lat=51.60333&lon=5.675&key=0a793836894f4ed79a7548da4a58d760";
@*
    private async Task GetPolutionData()
    {
        PolutionData = await http.GetJsonAsync<Object>("https://api.weatherbit.io/v2.0/current/airquality?lat=35.7721&lon=-78.63861&key=0a793836894f4ed79a7548da4a58d760");
    } 
*@

        async Task ShowAlert()
    // 51. 36 11.99
    {

          PolutionData = await http.GetJsonAsync<Object>(APICALL);

        await JSRuntime.InvokeVoidAsync(identifier: "LogList", PolutionData);

        await JSRuntime.InvokeVoidAsync(identifier: "createAlert");
        await JSRuntime.InvokeVoidAsync(identifier: "SetElement","txt");
       //     await JSRuntime.InvokeVoidAsync(identifier: "setChartNull");
        await JSRuntime.InvokeVoidAsync(identifier: "GenerateBars", dt,fdates);
        dt.Clear();
        fdates.Clear();

          
           

       // await JSRuntime.InvokeVoidAsync(identifier: "Pop",PopChart);
    }

        async Task DisplayCurrentData()
        {
             PolutionData = await http.GetJsonAsync<Object>("https://api.weatherbit.io/v2.0/current/airquality?lat=51.60333&lon=5.675&key=0a793836894f4ed79a7548da4a58d760");
            await JSRuntime.InvokeVoidAsync(identifier:"DisplayCurrentData",PolutionData);
                dt.Clear();
        fdates.Clear();
            PolutionData = null;
        }


}
</body>